<?xml version="1.0" encoding="utf-8"?>
<index version="1" name="Toni Barth REAPER Things" commit="2bb39e2d8becb30b44985450f86716b2339d2f92">
  <category name="FX">
    <reapack name="chessel_Chesseq.jsfx" type="effect" desc="Chesseq Midi sequencer">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Instructions:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This plugin is a monophonic midi sequencer that is intended to be accessible. This plugin reads text files containing a sequence of notes and velocities which need to be in a subfolder of the Reaper resources folder. Namely, Data/ChessSeq. Each file needs the txt extension. the file needs to be made up of a series of pairs of numbers. First number is the offset in semitones, the second is the velocity. No spaces. Lines starting with // are ignored. Here is an example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 //A 4 step sequence 0,100 7,50 12,80 -1,40\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This will play the root note, a fifth above, an octave above and a semitone below with given velocities.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A velocity of zero will mean no note is played. A velocity of -1 means a tie so the previous note will last longer. The offset value is ignored.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The sequencer makes no sound itself but sends midi events to a midi instrument. Use one of the following setups:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Put Chessel Sequencer on a track in front of a synth,\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Put Chessel Sequencer on the input FX chain with a synth on the main track FX. This allows you to capture the midi events.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Put Chessel Sequencer on a seprate track and set up a send to a track with a synth on.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The sequence file parameter is a list of all the files in the ChessSeq folder. When you change this parameter the sequence gets loaded. If you change the contents of the file you can reload it using the reload parameter which just needs a twiddle.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The Play Mode parameter has two options. Trigger mode allows you to press a key on a midi keyboard and that plays the next note in the sequence. It plays at the volume given in the file and lasts as long as you hold down the key. A step with a velocity of zero will still need a key press. A tied note gets skipped.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You can write a sequence to play a tune and simply play it by continually pressing a single key. To change the musical key, just use a different root note.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Sequencer mode plays the sequence at the rate determined by the steps per unit and beats per unit parameters. For example, with beats per unit set to 1 and steps per unit set to 4, the sequencer will play sixteenth notes. Press play and then play a key. This key acts as the root note so a step with an offset of zero will play at this pitch. As play continues you can change the root note by playing a different key. Playback of the sequence starts at the next beat so timing of key presses doesn't need to be precise. The note length parameter is a percentage of the time between steps. The sequencer will only play if Reaper is playing or recording.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T12:26:20Z">
        <source>https://github.com/Timtam/reapack/raw/5706f8835620ff7a81320a234e6f7c4ea8abd994/FX/chessel_Chesseq.jsfx</source>
        <source type="data" file="ChessSeq/4 step example.txt">https://github.com/Timtam/reapack/raw/5706f8835620ff7a81320a234e6f7c4ea8abd994/FX/ChesSeq%20example</source>
      </version>
      <version name="1.1" author="Chessel (Chris Goodwin)" time="2023-03-22T18:48:59Z">
        <changelog><![CDATA[* In sequencer play mode, it will play the sequencer even when stopped.� Reaper doesn�t need to be playing or recording anymore.
* There is a velocity source parameter which can either be the sequence file or key velocity. �That is, how hard you play a note.� This applies in both sequencer and trigger play modes.]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/2bb39e2d8becb30b44985450f86716b2339d2f92/FX/chessel_Chesseq.jsfx</source>
        <source type="data" file="ChessSeq/4 step example.txt">https://github.com/Timtam/reapack/raw/2bb39e2d8becb30b44985450f86716b2339d2f92/FX/ChesSeq%20example</source>
      </version>
    </reapack>
    <reapack name="chessel_midi ball bouncer.jsfx" type="effect" desc="MIDI Ball Bouncer">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 I\u65533?ve written a js plugin that captures midi notes being played and then repeats the notes like it is a bouncing ball. That is, the repeats get quicker and quicker and a little bit quieter.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-18T20:02:34Z">
        <source>https://github.com/Timtam/reapack/raw/f838716dab7d436ebf009854a8648090b4f2c2e1/FX/chessel_midi%20ball%20bouncer.jsfx</source>
      </version>
    </reapack>
  </category>
  <category name="Items Editing">
    <reapack name="chessel_Move to end of selected item.lua" type="script" desc="Move to end of selected item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves the edit cursor to the end of the item. Works even when there is an envelope selected.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20end%20of%20selected%20item.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Move to next item .lua" type="script" desc="Move to next item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves to the next item and selects that instead. Works even if an envelope has the focus.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20next%20item%20.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Move to previous item .lua" type="script" desc="Move to previous item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves to the previous item and selects that instead. Works even if an envelope has the focus.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20previous%20item%20.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Move to start of selected item.lua" type="script" desc="Move to start of selected item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves the edit cursor to the start of the item. Works even if an envelope is selected.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20start%20of%20selected%20item.lua</source>
      </version>
    </reapack>
  </category>
  <category name="MIDI Editor">
    <reapack name="chessel_Export MIDI Sequence To Chesseq Sequence File.lua" type="script" desc="Export MIDI sequence to Chesseq sequence file">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Utility to create a Chessel sequencer file. In a midi item, create a series of notes. There should be no chords though this won't break the script if there are. Timing of the notes is not important, just their order. The velocity of each note is also important when making up your sequence. When ready, select all the notes and run this script. You will get a Save As dialogue to save the txt file. Once saved, copy it to the Reaper Resource folder, in Data/ChessSeq You may need to create this subfolder. The text file, or sequence, will now be available when using the Chessel Sequencer plugin.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T12:03:13Z">
        <changelog><![CDATA[initial release]]></changelog>
        <source main="midi_editor">https://github.com/Timtam/reapack/raw/f5f1ef24ee052818c3ee03144ef3f97022eab479/MIDI%20Editor/chessel_Export%20MIDI%20Sequence%20To%20Chesseq%20Sequence%20File.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak note velocity.lua" type="script" desc="Speak the first selected note velocity">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Announces the velocity of the first selected midi note\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-01-07T21:13:57Z">
        <source main="midi_editor">https://github.com/Timtam/reapack/raw/afc172cdaf7649277f87672abf552b246c963f68/MIDI%20Editor/chessel_Speak%20note%20velocity.lua</source>
      </version>
    </reapack>
    <reapack name="timtam_AccessiChords.lua" type="script" desc="AccessiChords">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/graphs/contributors"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/contributors/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/network/members"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/forks/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/stargazers"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/stars/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/issues"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/issues/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/blob/master/LICENSE"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/license/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Table of Contents\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#about-the-project"}}{\fldrslt{\ul
About the Project
}}}
\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\field{\*\fldinst{HYPERLINK "#built-with"}}{\fldrslt{\ul
Built With
}}}
\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#getting-started"}}{\fldrslt{\ul
Getting Started
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#usage"}}{\fldrslt{\ul
Usage
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#roadmap"}}{\fldrslt{\ul
Roadmap
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#contributing"}}{\fldrslt{\ul
Contributing
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#license"}}{\fldrslt{\ul
License
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#contact"}}{\fldrslt{\ul
Contact
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 About The Project\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Chords are an important, if not the most important part of music. As soon as you're composing a piece of music in REAPER, you'll come across chords and will have to insert them into your MIDI editor. No problem if you are able to play them with your favourite MIDI controller, but more of a hassle when programming your music manually via keyboard, or if you are unable to play an instrument.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thats probably the reason why the {\field{\*\fldinst{HYPERLINK "https://github.com/benjohnson2001/ChordGun"}}{\fldrslt{\ul
ChordGun scripts
}}}
 where invented. Those were ment to provide a nice-looking interface and the ability to get a quick overview over all chords available and the possibility to quickly shoot them into your project whenever you need them.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Unfortunately though, those ChordGun scripts are not accessible for visually impaired users. The interface is not accessible at all, neither with JAWS nor NVDA, not under Mac nor Windows. Thats why I started this project. Let AccessiChords be the successor of ChordGun - at least for VI people.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As such, AccessiChords provides a way to quickly access all chords related to a note selected with the pitch cursor and inject them into your MIDI editor at the current position and with the given grid size. See {\field{\*\fldinst{HYPERLINK "#usage"}}{\fldrslt{\ul
Usage
}}}
 for more information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Built With\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://www.lua.org/manual/5.3/"}}{\fldrslt{\ul
Lua 5.3
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://reaper.fm"}}{\fldrslt{\ul
REAPER 6.13 and above (older versions might run as well)
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://osara.reaperaccessibility.com/snapshots/"}}{\fldrslt{\ul
OSARA nightly build as of Sep 4 or later
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Getting Started\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Installation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 ReaPack\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is recommended to get the latest stable version from ReaPack by synchronizing your repositories and searching for AccessiChords in the package list. This will make sure to add all the available actions to your actions list as well.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Building from source\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Clone\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you thus instead want to test the bleeding edge build of this package, clone this repository locally:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 git clone https://github.com/Timtam/AccessiChords.git\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Copy the timtam_AccessiChords folder into your REAPER's scripts folder afterwards.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 note: make sure to copy the folder directly into your Scripts folder, not in some other sub-folder or a totally different directory to make sure that the scripts work directly.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Adding actions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Open an empty project within REAPER and open the actions list (shortcut: F4). Make sure to filter for MIDI Editor so that the actions will not be accessible from outside that one. Now select New Action and Load ReaScript. Make sure to load every timtam_AccessiChords file from within the timtam_AccessiChords folder, except the one that is called timtam_AccessiChords.lua. That one only contains dependencies and doesn't contain any action. Also do not load the smallfolk.lua file, that one is not required as an action.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Assigning shortcuts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After installing the scripts in either of the ways above, you will have the actions provided by AccessiChords available in your actions list to be used. I however recommend to assign shortcuts to them to speed up the workflow and productivity with this toolset. Therefore, open the actions list again and search for AccessiChords in the filter input. I'd recommend the following shortcuts for the corresponding actions, although that's up to personal preference and you can assign them as you see fit:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords insert selected chord for pitch cursor.lua: Shift + i (CAUTION: this one seems to be assigned already, so you might need to overwrite it. It seems to be the same one as plain i though, so you shouldn't have any disadvantages in overwriting the original one)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords process notes deferred.lua: no shortcut required\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select next chord for pitch cursor.lua: CTRL + ALT + Up\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select previous chord for pitch cursor.lua: CTRL + ALT + DOWN\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select next chord inversion.lua: CTRL + ALT + RIGHT\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select previous chord inversion.lua: CTRL + ALT + LEFT\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: when using MacOS, control is command and alt is option. Shift remains the same.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The script will be entirely keyboard-controllable afterwards.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Usage\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All the functionalities below can and should only be executed from within the MIDI editor.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 note: all speech announcements will only work if you've got an OSARA version installed which was released Sep 4 2020 or later. If your installed OSARA version is older than that, you won't get any speech announcements by these scripts.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Cycling through available chords\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After you've selected a note using the pitch cursor (ALT + UP or DOWN arrow within the OSARA keymap), you can use the actions "timtam_AccessiChords select next chord for pitch cursor.lua" and "timtam_AccessiChords select previous chord for pitch cursor.lua" to cycle through all chords available for that note. When doing so, the chord will be played on the note channel selected for the virtual MIDI keyboard with the default velocity of the same. The name of the chord will also be announced by your screen reader. The scripts will also announce if the selected chord is not available for the given note.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Cycling through available chord inversions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After selecting a note with the pitch cursor and a chord using the above actions, you can use the actions "timtam_AccessiChords select next chord inversion.lua" and "timtam_AccessiChords select previous chord inversion.lua" to cycle through the available chord inversions. Those will be announced with speech and remember as well, so that you can use the above actions to change chords while the inversion will be maintained and can be inserted as usual (see below).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Inserting a selected chord\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When having a chord selected, you can use the action "timtam_AccessiChords insert selected chord for pitch cursor.lua" to insert this chord at the current position into the MIDI editor. The notes will have the length of the current grid size or, if the length of the next inserted note is set using the appropriate reaper-native actions, they will have the appropriate length as well. The chord will be played again and the edit cursor will automatically be moved along the track by the size of the inserted notes. Note though that in contradiction to reaper-native note insertion, there currently is no speech when the cursor is moved that way. This will be considered a feature later to be implemented though.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Roadmap\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/issues"}}{\fldrslt{\ul
open issues
}}}
 for a list of proposed features (and known issues).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contributing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are {\b greatly appreciated}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by coding\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Fork the Project\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Create your Feature Branch ({\f1 git checkout -b feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Commit your Changes ({\f1 git commit -m 'Add some AmazingFeature'})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Push to the Branch ({\f1 git push origin feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Open a Pull Request\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by testing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Feel free to give these scripts a go and see if they fit your workflow. Do you like those scripts, but can think of a way they might become even more useful to you? Feel free to let me know by opening an issue or contacting me via email at {\field{\*\fldinst{HYPERLINK "mailto:software@satoprogs.de"}}{\fldrslt{\ul
software@satoprogs.de
}}}
. Same goes for bugs you might have encountered or new features you'd like to see.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by paying me a coffee\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Developing takes time and effort and since those scripts are free to use and open-source, I don't get anything out of it except appreciation. Appreciation doesn't pay monthly bills though. If you think those scripts greatly improved your life by helping you with your productivity and workflow, or you simply want to give something back, i'd greatly appreciate a small donation via PayPal to the following link: {\field{\*\fldinst{HYPERLINK "https://paypal.me/ToniRonaldBarth"}}{\fldrslt{\ul
https://paypal.me/ToniRonaldBarth
}}}
 Don't feel obligated though.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 License\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Distributed under the GNU GPL v3 License. See {\f1 LICENSE} for more information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contact\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Toni Barth - {\field{\*\fldinst{HYPERLINK "https://twitter.com/GixGax95"}}{\fldrslt{\ul
@GixGax95
}}}
 - software@satoprogs.de\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Project Link: {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords"}}{\fldrslt{\ul
https://github.com/Timtam/AccessiChords
}}}
\par}
}
]]></description>
        <link rel="website" href="https://github.com/Timtam/AccessiChords">GitHub repository</link>
        <link rel="website" href="https://paypal.me/ToniRonaldBarth">Donation</link>
      </metadata>
      <version name="1.1" author="Toni Barth (Timtam)" time="2022-11-18T19:10:31Z">
        <changelog><![CDATA[* added: support chord inversions by adding two additional actions to switch between inversions
* fixed: flat fifth chord actually was a natural fifth chord
* fixed: AccessiChords didn't work with real-time generated samples (like ReaSynth)]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords stop notes.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20stop%20notes.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
      <version name="1.2" author="Toni Barth (Timtam)" time="2023-03-05T12:09:12Z">
        <changelog><![CDATA[* shortened playtime to 0.3 seconds
* rewrote stop notes action to work deferred
* added two new actions to cycle through chord modes and thus allowed to insert and preview broken chords (arpeggios)]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords process notes deferred.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20process%20notes%20deferred.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select next chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20mode.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select previous chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20mode.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
      <version name="1.2.1" author="Toni Barth (Timtam)" time="2023-03-05T12:19:25Z">
        <changelog><![CDATA[* fixed wrong action id for stopping currently playing notes]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords process notes deferred.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20process%20notes%20deferred.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select next chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20mode.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select previous chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20mode.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
      <version name="1.2.2" author="Toni Barth (Timtam)" time="2023-03-05T12:40:58Z">
        <changelog><![CDATA[* fixed incorrect paths for installed files
* fixed wrong action id for stopping currently playing notes]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords process notes deferred.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20process%20notes%20deferred.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20mode.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20mode.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
    </reapack>
    <reapack name="timtam_IntelliQuant.lua" type="script" desc="IntelliQuant">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 A way to quantize notes intelligently.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This script will make sure to e.g. pull the notes into the correct direction without snapping them to grid exactly. You can configure a window in which the notes will be quantized. More informative README will follow as soon as 1.0 is out.\par}
}
]]></description>
        <link rel="website" href="https://github.com/Timtam/IntelliQuant">GitHub repository</link>
        <link rel="website" href="https://paypal.me/ToniRonaldBarth">Donation</link>
      </metadata>
      <version name="1.0b1" author="Toni Barth (Timtam)" time="2022-11-18T18:36:53Z">
        <changelog><![CDATA[add additional support for 8th triplets, 16th triplets and quintuplets]]></changelog>
        <source file="timtam_IntelliQuant/smallfolk.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant quantize.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20quantize.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 32th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2032th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 4th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%204th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for quintuplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%20quintuplet%20note%20quantization.lua</source>
        <source file="timtam_IntelliQuant/timtam_IntelliQuant.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant.lua</source>
      </version>
      <version name="1.0b2" author="Toni Barth (Timtam)" time="2023-01-15T19:12:01Z">
        <changelog><![CDATA[add flam support for all actions via additional parameter within the configuration dialog]]></changelog>
        <source file="timtam_IntelliQuant/smallfolk.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant quantize.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20quantize.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 32th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2032th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 4th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%204th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for quintuplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%20quintuplet%20note%20quantization.lua</source>
        <source file="timtam_IntelliQuant/timtam_IntelliQuant.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant.lua</source>
      </version>
      <version name="1.0b3" author="Toni Barth (Timtam)" time="2023-01-15T19:38:35Z">
        <changelog><![CDATA[fix flam support introduced in 1.0b2]]></changelog>
        <source file="timtam_IntelliQuant/smallfolk.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant quantize.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20quantize.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 32th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2032th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 4th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%204th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for quintuplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%20quintuplet%20note%20quantization.lua</source>
        <source file="timtam_IntelliQuant/timtam_IntelliQuant.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant.lua</source>
      </version>
    </reapack>
  </category>
  <category name="Various">
    <reapack name="chessel_Butt right edge of selected item up to next item.lua" type="script" desc="Butt right edge of selected item up to next item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Move selected item so right edge touches left edge of next item on track\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <changelog><![CDATA[# use VF version check]]></changelog>
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Butt%20right%20edge%20of%20selected%20item%20up%20to%20next%20item.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Cycle Project Timebase.lua" type="script" desc="Cycle Project Timebase">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Cycles through the 3 options for project time base\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Cycle%20Project%20Timebase.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Freeze track and add text to track name.lua" type="script" desc="Freeze track and add text to track name">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Call stock freeze track to stereo action and append the word frozen to track name\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Freeze%20track%20and%20add%20text%20to%20track%20name.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak Selected Items Length.lua" type="script" desc="Speak Selected Items Length">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Announces the sum of all selected item lengths items\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin), Pete Torpey" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Speak%20Selected%20Items%20Length.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak Selected Track End Time.lua" type="script" desc="Speak Selected Track End Time">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Speak the time of the end of the last item on the first selected track\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Speak%20Selected%20Track%20End%20Time.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak time to start of next item.lua" type="script" desc="Speak time to start of next item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Finds the first selected item and announces time to the start of the next item. A positive number means there is space between the current item and the next one.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin), Pete Torpey" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Speak%20time%20to%20start%20of%20next%20item.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Unfreeze track and remove text from track name.lua" type="script" desc="Unfreeze track and remove text from track name">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Call stock unfreeze track function and remove the word frozen to track name\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Unfreeze%20track%20and%20remove%20text%20from%20track%20name.lua</source>
      </version>
    </reapack>
    <reapack name="timtam_IntelliFreeze.lua" type="script" desc="IntelliFreeze">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 About The Project\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With a collaboration on the horizon, I started to check my possible ways to freely share work with others without having to re-import tracks all the time, but also allowing me and my collaborators to use plug-ins that the others don't have. Freezing was deffinetily the way to go, but my templates usually work with multiple levels of track folders and freezing a folder would just create a frozen item and mute all sub-tracks, which would cause various issues for my collaborators. Why not freeze all tracks individually from the get-go?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thats exactly how the actions within this script work, they check the currently selected tracks, recursively gather all the sub-tracks that require freezing and freeze them individually bottom-up.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Built With\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://www.lua.org/manual/5.3/"}}{\fldrslt{\ul
Lua 5.3
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://reaper.fm"}}{\fldrslt{\ul
REAPER 6.53 and above (older versions might run as well)
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Getting Started\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Installation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 ReaPack\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is recommended to get the latest stable version from ReaPack by synchronizing your repositories and searching for IntelliFreeze in the package list. This will make sure to add all the available actions to your actions list as well.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Building from source\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Clone\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you thus instead want to test the bleeding edge build of this package, clone this repository locally:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 git clone https://github.com/Timtam/IntelliFreeze.git\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Copy the timtam_IntelliFreeze folder into your REAPER's scripts folder afterwards.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 note: make sure to copy the folder directly into your Scripts folder, not in some other sub-folder or a totally different directory to make sure that the scripts work directly.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Adding actions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Open an empty project within REAPER and open the actions list (shortcut: F4). Now select New Action and Load ReaScript. Make sure to load every timtam_IntelliChords file from within the timtam_IntelliFreeze folder, except the one that is called timtam_IntelliFreeze.lua. That one only contains dependencies and doesn't contain any action.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Usage\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Its as easy as it can get, just select the tracks, folders, whatever you want to freeze within REAPER and run the corresponding action from the actions list. Feel free to bind them to keystrokes if you end up using them often.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Roadmap\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/IntelliFreeze/issues"}}{\fldrslt{\ul
open issues
}}}
 for a list of proposed features (and known issues).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contributing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are {\b greatly appreciated}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by coding\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Fork the Project\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Create your Feature Branch ({\f1 git checkout -b feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Commit your Changes ({\f1 git commit -m 'Add some AmazingFeature'})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Push to the Branch ({\f1 git push origin feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Open a Pull Request\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by testing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Feel free to give these scripts a go and see if they fit your workflow. Do you like those scripts, but can think of a way they might become even more useful to you? Feel free to let me know by opening an issue or contacting me via email at {\field{\*\fldinst{HYPERLINK "mailto:software@satoprogs.de"}}{\fldrslt{\ul
software@satoprogs.de
}}}
. Same goes for bugs you might have encountered or new features you'd like to see.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by paying me a coffee\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Developing takes time and effort and since those scripts are free to use and open-source, I don't get anything out of it except appreciation. Appreciation doesn't pay monthly bills though. If you think those scripts greatly improved your life by helping you with your productivity and workflow, or you simply want to give something back, i'd greatly appreciate a small donation via PayPal to the following link: {\field{\*\fldinst{HYPERLINK "https://paypal.me/ToniRonaldBarth"}}{\fldrslt{\ul
https://paypal.me/ToniRonaldBarth
}}}
 Don't feel obligated though.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 License\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Distributed under the GNU GPL v3 License. See {\f1 LICENSE} for more information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contact\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Toni Barth - {\field{\*\fldinst{HYPERLINK "https://twitter.com/GixGax95"}}{\fldrslt{\ul
@GixGax95
}}}
 - software@satoprogs.de\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Project Link: {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/IntelliFreeze"}}{\fldrslt{\ul
https://github.com/Timtam/IntelliFreeze
}}}
\par}
}
]]></description>
        <link rel="website" href="https://github.com/Timtam/IntelliFreeze">GitHub repository</link>
        <link rel="website" href="https://paypal.me/ToniRonaldBarth">Donation</link>
      </metadata>
      <version name="1.1" author="Toni Barth (Timtam)" time="2022-11-18T17:02:02Z">
        <changelog><![CDATA[- consider takes with FX to be frozen too]]></changelog>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Freeze all selected tracks to mono recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Freeze%20all%20selected%20tracks%20to%20mono%20recursively.lua</source>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Freeze all selected tracks to multi-channel recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Freeze%20all%20selected%20tracks%20to%20multi-channel%20recursively.lua</source>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Freeze all selected tracks to stereo recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Freeze%20all%20selected%20tracks%20to%20stereo%20recursively.lua</source>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Unfreeze all selected tracks recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Unfreeze%20all%20selected%20tracks%20recursively.lua</source>
        <source file="timtam_IntelliFreeze/timtam_IntelliFreeze.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze.lua</source>
      </version>
    </reapack>
  </category>
  <metadata>
    <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 ReaPack Repository Template\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A template for GitHub-hosted ReaPack repositories with automated {\field{\*\fldinst{HYPERLINK "https://github.com/cfillion/reapack-index"}}{\fldrslt{\ul
reapack-index
}}}
 running from GitHub Actions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Replace the name of the repository in {\field{\*\fldinst{HYPERLINK "/index.xml"}}{\fldrslt{\ul
index.xml
}}}
 when using this template. This will be the name shown in ReaPack.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <index version="1" name="Name of your repository here">\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Replace the contents of this file ({\field{\*\fldinst{HYPERLINK "/README.md"}}{\fldrslt{\ul
README.md
}}}
). This will be the text shown when using ReaPack's "About this repository" feature.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 reapack-index looks for package files in subfolders. The folder tree represents the package categories shown in ReaPack.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Each package file is expected to begin with a metadata header. See {\field{\*\fldinst{HYPERLINK "https://github.com/cfillion/reapack-index/wiki/Packaging-Documentation"}}{\fldrslt{\ul
Packaging Documentation
}}}
 on reapack-index's wiki.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The URL to import in ReaPack is {\field{\*\fldinst{HYPERLINK "https://github.com/cfillion/reapack-repository-template/raw/master/index.xml"}}{\fldrslt{\ul
https://github.com/{\f1 <your username>}/{\f1 <repository name>}/raw/master/index.xml
}}}
.\par}
}
]]></description>
  </metadata>
</index>
