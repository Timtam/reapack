<?xml version="1.0" encoding="utf-8"?>
<index version="1" name="Toni Barth REAPER Things" commit="1756ad29b0ec0b61ec55bfe4d94b92c53cab7c82">
  <category name="FX">
    <reapack name="ch_61 re-mapper.jsfx" type="effect" desc="CH 61 ReMapper">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 this plugin can map any note on a 61 key piano to any other note on a 61 key piano. chane the slider values next to note names to remap keys. use c as your reference point all c notes are multiples of 12 c2 is 24 c4 is 48 etc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These instructions apply to both the CH 61 and 88 ReMapper plugins. as the name suggests, these plugins are made to remap keys or notes on a midi keyboard. if you are looking for a remapper plugin, you already know what to use it for. but a few use cases include changing the keymaps for different drum plugins to make playing them easier or to make midi groove files work better betweeen different drum plugins, to remap drum pads, make templates for scales you find difficult to play or to repurpose other keys to play dead notes on your piano. these plugins serve only a single purpose, but the interface can be confusing at first, so below is a little guide on how to use these. Note: the only difference between the CH 61 and 88 ReMapper plugins, is the number of notes they can remap. the 88 remapper can remap any note on an 88 key midi keyboard to any other note on an 88 key midi keyboard. while the 61 remapper can do that for a 61 key midi keyboard. so use the version according to your hardware.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 How To Use:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab insert the CH ReMapper plugin on the track you wish to remap the incoming midi notes on.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab make sure the ReMapper plugin comes before the virtual instrument you want to control or send the remapped midi data to. reason, the remapper plugin will take the normal midi data, change it and send it to the plugin so it needs to be before the instrument in the fx list.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab open the osara parameter list by pressing "P" on the instrument track and select the CH 61 or 88 ReMapper plugin. hit enter to enter the parameter list.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab you will be presented by 61 or 88 parameters depending on the version you're using. all 61 or 88 parameters represent the notes on a piano that you can remap. all parameters are named according to the note they represent.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab on the 61 key version these notes start from C2 and go up to C7. on the 88 key version this range is A0 to C8, covering the entire range of an 88 key keyboard.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab clicking tab once on a note name will land you to a slider with numbers ranging from 24 to 84 for the 61 key version and 9 to 96 for the 88 key version. changing this number with the arrow keys will change the note that the selected note is mapped to and plays when its pressed.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab every note name is set to a value by default. this value represents their position on the piano. for A0 it is 9 because its the 9th note starting from C0 which we call 0 and will take as a reference point.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 8.\tx360\tab once you know that rest is easy. there are 12 notes in an octave so every c on the piano is a multiple of 12. c1 is 12, c2 is 24, which is the starting nnote on a 61 key piano. c3 is 36, c4 is 48, c5 is 60, c6 is 72, c7 is 84, which is the last key on a 61 key piano and c8 is 96 which is the last key on an 88 key piano.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 9.\tx360\tab you can find the value of other notes relative to the value of c. for example e is the 5th note in an octave, so e2 is 4 (5 minus 1 because 24 is already the first note of the octave) added to 24 which is 28. e4 is 4 added to 48 which is 52. hope it makes sense. a is the 10th note so a4 is 9 added to 48 which is 57.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 10.\tx360\tab and thats it change the value and you're done. yeehaw.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Disclaimer: the developer of these plugins (me) is blind and not by any means an expert at this. so he (me) cant promise any support if these plugins misbehave or decide to not work. nor will the developer (again me) be responsible for any damage caused to your equipment or brain while using this plugin. that said, if you find these useful and feel like saying thanks you can reach me at imcaesarhope@gmail.com. i can also be found in the reaper access group. happy remapping.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Caesar H (reaper access)" time="2025-03-13T14:59:33Z">
        <changelog><![CDATA[* initial release]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/9458ca3a7248a7bcd5abdd57738f420f2ccc39cf/FX/ch_61%20re-mapper.jsfx</source>
      </version>
    </reapack>
    <reapack name="ch_88 re-mapper.jsfx" type="effect" desc="CH 88 ReMapper">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 this plugin can map any note on an 88 key piano to any other note on an 88 key piano. chane the slider values next to note names to remap keys. use c as your reference point all c notes are multiples of 12 c2 is 24 c4 is 48 etc.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These instructions apply to both the CH 61 and 88 ReMapper plugins. as the name suggests, these plugins are made to remap keys or notes on a midi keyboard. if you are looking for a remapper plugin, you already know what to use it for. but a few use cases include changing the keymaps for different drum plugins to make playing them easier or to make midi groove files work better betweeen different drum plugins, to remap drum pads, make templates for scales you find difficult to play or to repurpose other keys to play dead notes on your piano. these plugins serve only a single purpose, but the interface can be confusing at first, so below is a little guide on how to use these. Note: the only difference between the CH 61 and 88 ReMapper plugins, is the number of notes they can remap. the 88 remapper can remap any note on an 88 key midi keyboard to any other note on an 88 key midi keyboard. while the 61 remapper can do that for a 61 key midi keyboard. so use the version according to your hardware.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 How To Use:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab insert the CH ReMapper plugin on the track you wish to remap the incoming midi notes on.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab make sure the ReMapper plugin comes before the virtual instrument you want to control or send the remapped midi data to. reason, the remapper plugin will take the normal midi data, change it and send it to the plugin so it needs to be before the instrument in the fx list.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab open the osara parameter list by pressing "P" on the instrument track and select the CH 61 or 88 ReMapper plugin. hit enter to enter the parameter list.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab you will be presented by 61 or 88 parameters depending on the version you're using. all 61 or 88 parameters represent the notes on a piano that you can remap. all parameters are named according to the note they represent.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab on the 61 key version these notes start from C2 and go up to C7. on the 88 key version this range is A0 to C8, covering the entire range of an 88 key keyboard.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 6.\tx360\tab clicking tab once on a note name will land you to a slider with numbers ranging from 24 to 84 for the 61 key version and 9 to 96 for the 88 key version. changing this number with the arrow keys will change the note that the selected note is mapped to and plays when its pressed.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 7.\tx360\tab every note name is set to a value by default. this value represents their position on the piano. for A0 it is 9 because its the 9th note starting from C0 which we call 0 and will take as a reference point.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 8.\tx360\tab once you know that rest is easy. there are 12 notes in an octave so every c on the piano is a multiple of 12. c1 is 12, c2 is 24, which is the starting nnote on a 61 key piano. c3 is 36, c4 is 48, c5 is 60, c6 is 72, c7 is 84, which is the last key on a 61 key piano and c8 is 96 which is the last key on an 88 key piano.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 9.\tx360\tab you can find the value of other notes relative to the value of c. for example e is the 5th note in an octave, so e2 is 4 (5 minus 1 because 24 is already the first note of the octave) added to 24 which is 28. e4 is 4 added to 48 which is 52. hope it makes sense. a is the 10th note so a4 is 9 added to 48 which is 57.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 10.\tx360\tab and thats it change the value and you're done. yeehaw.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Disclaimer: the developer of these plugins (me) is blind and not by any means an expert at this. so he (me) cant promise any support if these plugins misbehave or decide to not work. nor will the developer (again me) be responsible for any damage caused to your equipment or brain while using this plugin. that said, if you find these useful and feel like saying thanks you can reach me at imcaesarhope@gmail.com. i can also be found in the reaper access group. happy remapping.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Caesar H (reaper access)" time="2025-03-13T14:59:33Z">
        <changelog><![CDATA[* initial release]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/9458ca3a7248a7bcd5abdd57738f420f2ccc39cf/FX/ch_88%20re-mapper.jsfx</source>
      </version>
    </reapack>
    <reapack name="ch_drum re-mapper.jsfx" type="effect" desc="CH Drum ReMapper">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 this plugin is made to remap keys on a piano or drumpads. it has a range of 24 notes and you can map them to any note from a0 to c8. these two octaves repeat after ending, read the read me file for more information. disclaimer, im a blind person like most other folks in the reaper access group and not a js expert. so i cant promise any support if this plugin misbehaves or decides to not work. nor will i be responsible for any damage caused to your equipment and brain when trying to use this plugin. if you find this little tool useful and feel like saying thanks, you can reach me at imcaesarhope@gmail.com. i can also be found in the reaper access group; have fun remapping.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Caesar H" time="2025-03-13T14:59:33Z">
        <changelog><![CDATA[* initial release]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/9458ca3a7248a7bcd5abdd57738f420f2ccc39cf/FX/ch_drum%20re-mapper.jsfx</source>
      </version>
    </reapack>
    <reapack name="ch_easy scales.jsfx" type="effect" desc="CH Easy Scales">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 this plugin maps the selected scales to the white keys on a piano for easier playing. the options are major, natural, harmonic and melodic minor. all black keys are blocked, change the root note to change key. use the octave offset to make higher keys start at a lower position. range is c2 to c7. disclaimer, im a blind person like most other folks in the reaper access group and not a js expert. so i cant promise any support if this plugin misbehaves or decides to not work. nor will i be responsible for any damage caused to your equipment and brain when trying to use this plugin. if you find this tool useful and feel like saying thanks, you can reach me at imcaesarhope@gmail.com. i can also be found in the reaper access group; have fun playing.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Caesar H" time="2025-03-31T10:13:44Z">
        <changelog><![CDATA[* initial release]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/1756ad29b0ec0b61ec55bfe4d94b92c53cab7c82/FX/ch_easy%20scales.jsfx</source>
      </version>
    </reapack>
    <reapack name="ch_make minor.jsfx" type="effect" desc="CH Make Minor">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 this plugin takes the c major scale keys and maps them to minor scale, all black keys are blocked, change the root note to change key. use the octave offset to make higher keys start at a lower position. range is c2 to c7. disclaimer, im a blind person like most other folks in the reaper access group and not a js expert. so i cant promise any support if this plugin misbehaves or decides to not work. nor will i be responsible for any damage caused to your equipment and brain when trying to use this plugin. if you find this tool useful and feel like saying thanks, you can reach me at imcaesarhope@gmail.com. i can also be found in the reaper access group; have fun remapping.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Caesar H" time="2025-03-13T14:59:33Z">
        <changelog><![CDATA[* initial release]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/9458ca3a7248a7bcd5abdd57738f420f2ccc39cf/FX/ch_make%20minor.jsfx</source>
      </version>
    </reapack>
    <reapack name="ch_make pentatonic.jsfx" type="effect" desc="CH Make Pentatonic">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 this plugin maps the major and minor pentatonic scales to keys C, D, E, F and G. the mapped notes are inline and all other notes are blocked. change the root note to change key. use the octave offset to make higher keys start at a lower position. range is c2 to c7. disclaimer, im a blind person like most other folks in the reaper access group and not a js expert. so i cant promise any support if this plugin misbehaves or decides to not work. nor will i be responsible for any damage caused to your equipment and brain when trying to use this plugin. if you find this tool useful and feel like saying thanks, you can reach me at imcaesarhope@gmail.com. i can also be found in the reaper access group; have fun playing.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Caesar H" time="2025-03-31T10:13:44Z">
        <changelog><![CDATA[* initial release]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/1756ad29b0ec0b61ec55bfe4d94b92c53cab7c82/FX/ch_make%20pentatonic.jsfx</source>
      </version>
    </reapack>
    <reapack name="chessel_Chesseq.jsfx" type="effect" desc="ChessSeq Midi sequencer">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Instructions: This plugin is a monophonic midi sequencer that is intended to be accessible. This plugin reads text files containing a sequence of notes and velocities which need to be in a subfolder of the Reaper resources folder. Namely, Data/ChessSeq. Each file needs the txt extension. the file needs to be made up of a series of pairs of numbers. First number is the offset in semitones, the second is the velocity. No spaces. Lines starting with // are ignored. Here is an example:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 //A 4 step sequence 0,100 7,50 12,80 -1,40\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This will play the root note, a fifth above, an octave above and a semitone below with given velocities. A velocity of zero will mean no note is played. A velocity of -1 means a tie so the previous note will last longer. The offset value is ignored. The sequencer makes no sound itself but sends midi events to a midi instrument. Use one of the following setups:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Put Chessel Sequencer on a track in front of a synth,\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Put Chessel Sequencer on the input FX chain with a synth on the main track FX. This allows you to capture the midi events. Good idea to enable PDC on the track when using this method to ensure notes land exactly on the beat.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Put Chessel Sequencer on a seprate track and set up a send to a track with a synth on.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The sequence file parameter is a list of all the files in the ChessSeq folder. When you change this parameter the sequence gets loaded. If you change the contents of the file you can reload it using the reload parameter which just needs a twiddle.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The Play Mode parameter has two options.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Trigger mode allows you to press a key on a midi keyboard and that plays the next note in the sequence. By default, the velocity is set by the sequence file but toggling the velocity source parameter to "Key velocity" changes it to play at the velocity of the played key. The note lasts as long as you hold down the key. A step with a velocity of zero will still need a key press. A tied note gets skipped. You can write a sequence to play a tune and simply play it by continually pressing a single key. To change the musical key, just use a different root note.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Sequencer mode plays the sequence at the rate determined by the steps per unit and beats per unit parameters. For example, with beats per unit set to 1 and steps per unit set to 4, the sequencer will play sixteenth notes. Or a polyrythm of 5 notes every half measure can be set up with notes per unit set to 5 and beats per unit set to 2. To play just hold down a key. This key acts as the root note so a step with an offset of zero will play at this pitch. A step defined in the sequence file of 7 will play a fifth above this root note. As play continues you can change the root note by holding down a different key. Play legato for smooth transitions or leave a gap between keys to have the sequence restart from the first step. When Reaper is playing or recording, playback of the sequence starts at the next beat so timing of key presses doesn't need to be precise. The legato parameter is a percentage of the time between steps. Small values will be more staccato and larger values will approach full legato.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The mute parameter will suspend midi events but the sequencer will keep cycling. The direction the sequence is played can be reversed by toggling the direction parameter. Be aware of loading a new sequence from file if the direction is set to backwards! The invert parameter allows for playing negative harmonies as each step in the sequence is inverted. A step with offset plus 5 will become negative 5. An offset of negative 12 will become lus 12.\line Generally, a sequence in a major key will become minor and vice versa. Good results are obtained by playing an inverted sequence a perfect fifth (7 steps) higher. The order of steps can be randomized using the Randomize parameter. The mute, direction, invert and randomize parameters can all be set to be midi key triggered with keys from 0 to 48.\line For example, setting the mute trigger key to 48 means that playing the sequence and then pressing midi note 48 will mute the further midi messages from being sent to the synth. This feature is also useful for playing inverted sequences on the fly.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Possible future work:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Add a swing parameter which will affect every other note.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If velocity is -2 this means a slide which overrides the length parameter so this will cause a synth with portomento to work.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If a second key is held down in sequencer mode that is a minor or major third above the root note, any steps with this offset will get played as minor or major accordingly.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Allow a number of sequence patterns to be loaded. Activate each pattern with keys C0 to B0.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Polyphonic mode where you can define extra notes to play at same time as root steps, or possibly if you play a chord these are played.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Currently, play note 1, play note 2 legato, release note 2, should return to note 1 which is still held down.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Add parameters for probability of randomizing a step, and another parameter for range of randomization. Possibly limit to a scale?\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Known bugs:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Whilst playing a sequence, pressing home to go to start of project stops it playing and you can play any more.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab When preroll is on, recording root notes will only start at beat 2 and not beat 1. Yet what is recorded is correct and subsequent plays will start at beat 1.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Putting legato up to 93% or higher leads to notes playing endlessly.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab If you change direction or invert parameters whilst playing up into the key number area, should it revert to the default value? Currently stays backwards or inverted.\sa180\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T12:26:20Z">
        <source>https://github.com/Timtam/reapack/raw/5706f8835620ff7a81320a234e6f7c4ea8abd994/FX/chessel_Chesseq.jsfx</source>
        <source type="data" file="ChessSeq/4 step example.txt">https://github.com/Timtam/reapack/raw/5706f8835620ff7a81320a234e6f7c4ea8abd994/FX/ChesSeq%20example</source>
      </version>
      <version name="1.1" author="Chessel (Chris Goodwin)" time="2023-03-22T18:48:59Z">
        <changelog><![CDATA[* In sequencer play mode, it will play the sequencer even when stopped.� Reaper doesn�t need to be playing or recording anymore.
* There is a velocity source parameter which can either be the sequence file or key velocity. �That is, how hard you play a note.� This applies in both sequencer and trigger play modes.]]></changelog>
        <source>https://github.com/Timtam/reapack/raw/2bb39e2d8becb30b44985450f86716b2339d2f92/FX/chessel_Chesseq.jsfx</source>
        <source type="data" file="ChessSeq/4 step example.txt">https://github.com/Timtam/reapack/raw/2bb39e2d8becb30b44985450f86716b2339d2f92/FX/ChesSeq%20example</source>
      </version>
      <version name="1.2" author="Chessel (Chris Goodwin)" time="2023-04-03T15:05:36Z">
        <source>https://github.com/Timtam/reapack/raw/201d9ecf0aeaffb5d9436969cfbb2774aae7c9e9/FX/chessel_Chesseq.jsfx</source>
        <source type="data" file="ChessSeq/4 step example.txt">https://github.com/Timtam/reapack/raw/201d9ecf0aeaffb5d9436969cfbb2774aae7c9e9/FX/ChesSeq%20example</source>
      </version>
      <version name="1.3" author="Chessel" time="2023-04-06T08:03:28Z">
        <source>https://github.com/Timtam/reapack/raw/7b1ed9a48ea631b7ba7781c3b62d0b3e5d02a00a/FX/chessel_Chesseq.jsfx</source>
        <source type="data" file="ChessSeq/4 step example.txt">https://github.com/Timtam/reapack/raw/7b1ed9a48ea631b7ba7781c3b62d0b3e5d02a00a/FX/ChesSeq%20example</source>
      </version>
    </reapack>
    <reapack name="chessel_LFO Genie.jsfx" type="effect" desc="LFO Genie">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 LFO generator for volume, pan and an output parameter for automating any plugin parameter to this LFO\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Put this plugin on a track. The Volume/Pan parameter toggles between applying the LFO to the volume, the pan or neither and just exposing an output parameter which can be linked to any plugin on the FX chain to modulate one of its parameters with the LFO Parameter list:\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab output. the output of the LFO. Link other plugin parameters to this parameter in the Reaper parameter modulation dialog.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Frequency. Frequency in cycles per second (Hertz) or cycles per beat depending on the setting of the tempo sync parameter.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Phase. Sets the phase of the LFO ranging from 0 to 100. When LFO is in deterministic mode (see free running parameter) the LFO starts with a phase at this value.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Min and max amplitude. Sets the low and high extents of the LFO. When in volume mode, minimum value should be 0 and max value should be 1. For pan mode the practical range is -1 to +1.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Wave type. Hopefully self explanatory. Or play around to hear the effect.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab PCM width. When wave type is set to square this parameter varies how much time is spent at the low and high values.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Portomento. When in square wave mode this slides the LFO from one value to the next. The value is a percentage of the length of the value being moved to.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Symmetry of portomento. Only has an effect when PCM width is not set to 50% and portomento is non-zero. The portomento slide can be made unsymmetrical to match the width of each part of the square wave.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Inflation. Applies to sine and triangle wave shapes only. Positive values make the LFO spend more time closer to the extremes. Imagine inflating a sine wave like a balloon so more of the curve is near the top and bottom of the curve. In the extreme you end up with a square wave and in a way this parameter is useful for creating a softer edged square wave. A negative value for this parameter is like sucking air out of the LFO and for a sine wave it tends towards a spike pointing up and a spike pointing down until in the extreme you get a flat line.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Rectify. Makes the LFO have only positive values in terms of the fundamental shape of the waveform. Or rectify to flat sets the negative portion to zero.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Invert. Flips the LFO.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Tempo sync. Toggles between the frequency being in Hertz or cycles per beat.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Slowness factor. When you want a really slow LFO you can reduce the frequency by a factor of up to 1000.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab On/Off/Hold. On means the LFO is fully working. Off means the output is zero. Hold suspends the LFO at the current value.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Secondary wave type. A second waveform can be blended in with the primary waveform and selected here.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Blend amount. 0 means the output is all primary waveform and 1 means the output is all secondary wave form.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Floor and ceiling. Caps the extremes of the LFO output. These parameters are percentages of the range.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Deterministic / free running. A deterministic LFO will start with a phase defined by the phase parameter when play starts. A free running LFO keeps going and is never reset.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Randomize PCM width. When the waveform is square the width of the pulse can be randomized using this parameter. this parameter indicates the percentage of the width for the maximum range of the randomness.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Randomize range. Randomizes the low and high value of the LFO. Is a percentage of the range.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab MIDI mode. There are two relevant controls:\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Apply, which can be just envelope, just LFO or both envelope and LFO.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab MIDI on off which has values of off, retrigger, on and on inverted.\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 When midi is off then the midi keys have no effect and whether the envelope and LFO are applied is purely down to the apply parameter. The envelope will loop. When midi is on or inverted on, the modulation is either on or off depending on the midi keys pressed. the envelope loops but pressing the LFO or envelope retrigger keys will reset these. In retrigger mode, the envelope is only active when the envelope note is held down. It will stay in the sustain stage once reached and as long as the note is held down. If the sustain level is zero then the envelope will loop back to the beginning. When the note is released the envelope goes into the release stage and will not start again until the note is played again. What is heard is all subject to the state of the apply parameter.\line Volume and pan will follow the above rules.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab MIDI velocity. When on, how fast the note is played is reflected in the max range of the LFO.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab MIDI channel. The channel the plugin is listening to for a MIDI trigger.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab MIDI note. The note value the plugin is listening for to. 60 is middle C.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Envelope retrigger. the MIDI note that retriggers the envelope.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab LFO Retrigger. When MIDI is on this is the note that causes the LFO to be set back to zero plus any phase offset\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Volume or pan. Sets whether the LFO affects the volume of the audio it receives, the pan, or neither and just modulates the output parameter which other plugins on the FX chain can be linked to.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Inputs 1 to 6. Link these parameters to another LFO here and they get added to the output.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Absolute phase. Internal use only.\sa180\par}
}
]]></description>
      </metadata>
      <version name="1.4" author="Chessel (Chris Goodwin)" time="2023-12-22T15:11:28Z">
        <source>https://github.com/Timtam/reapack/raw/d4feb358646d2b6defa9f82e9e4359be141aaca6/FX/chessel_LFO%20Genie.jsfx</source>
      </version>
    </reapack>
    <reapack name="chessel_midi ball bouncer.jsfx" type="effect" desc="MIDI Ball Bouncer">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 I\u65533?ve written a js plugin that captures midi notes being played and then repeats the notes like it is a bouncing ball. That is, the repeats get quicker and quicker and a little bit quieter.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-18T20:02:34Z">
        <source>https://github.com/Timtam/reapack/raw/f838716dab7d436ebf009854a8648090b4f2c2e1/FX/chessel_midi%20ball%20bouncer.jsfx</source>
      </version>
    </reapack>
    <reapack name="chessel_MIDI Key Driver.jsfx" type="effect" desc="MIDI Key Driver">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 This plugin exposes a parameter called output which is driven by the pitch of the last midi note received. Another plugin on the same FX chain can have a parameter linked to this output usinng Reaper's parameter modulation dialogue. This allows playing notes to drive this other plugin's parameter. Use the PM dialogue to set the offset and scale of the link. Other features include an offset of the midi key that acts as zero, a glide or portomento like time for the transition to the new value and whether this transition time is velocity sensitive.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-11-18T19:42:32Z">
        <source>https://github.com/Timtam/reapack/raw/32d983aac5d33428d22ea9a4b54f3573e5b97715/FX/chessel_MIDI%20Key%20Driver.jsfx</source>
      </version>
    </reapack>
    <reapack name="chessel_Set Last Touched Parameter To All Same FX In FX Chain.lua" type="script" desc="Set Last Touched Parameter  To All Same FX In FX Chain">
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-11-27T21:14:03Z">
        <source main="main">https://github.com/Timtam/reapack/raw/02e4d9dc2650d0de33d8eda5cf39744aed860284/FX/chessel_Set%20Last%20Touched%20Parameter%20To%20All%20Same%20FX%20In%20FX%20Chain.lua</source>
      </version>
    </reapack>
  </category>
  <category name="Items Editing">
    <reapack name="chessel_Move to end of selected item.lua" type="script" desc="Move to end of selected item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves the edit cursor to the end of the item. Works even when there is an envelope selected.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20end%20of%20selected%20item.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Move to next item .lua" type="script" desc="Move to next item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves to the next item and selects that instead. Works even if an envelope has the focus.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20next%20item%20.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Move to previous item .lua" type="script" desc="Move to previous item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves to the previous item and selects that instead. Works even if an envelope has the focus.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20previous%20item%20.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Move to start of selected item.lua" type="script" desc="Move to start of selected item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 When there is only one selected item in the project, moves the edit cursor to the start of the item. Works even if an envelope is selected.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T08:13:37Z">
        <source main="main">https://github.com/Timtam/reapack/raw/b44d07fe8ecae8ac8840f921439afb9867dc04ad/Items%20Editing/chessel_Move%20to%20start%20of%20selected%20item.lua</source>
      </version>
    </reapack>
  </category>
  <category name="MIDI Editor">
    <reapack name="chessel_Add Pitch Bend Vibrato.lua" type="script" desc="Add pitch bend vibrato">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Adds a series of pitch bends to simulate vibrato on a guitar so never goes below the neutral bend offset\par}
}
]]></description>
      </metadata>
      <version name="0.2" author="Chessel (Chris Goodwin)" time="2023-09-14T13:36:54Z">
        <changelog><![CDATA[initial release]]></changelog>
        <source main="midi_editor">https://github.com/Timtam/reapack/raw/7f216cbf99816a8e52fa7238e1c0c56c93f213f3/MIDI%20Editor/chessel_Add%20Pitch%20Bend%20Vibrato.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Export MIDI Sequence To Chesseq Sequence File.lua" type="script" desc="Export MIDI sequence to Chesseq sequence file">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Utility to create a Chessel sequencer file. In a midi item, create a series of notes. There should be no chords though this won't break the script if there are. Timing of the notes is not important, just their order. The velocity of each note is also important when making up your sequence. When ready, select all the notes and run this script. You will get a Save As dialogue to save the txt file. Once saved, copy it to the Reaper Resource folder, in Data/ChessSeq You may need to create this subfolder. The text file, or sequence, will now be available when using the Chessel Sequencer plugin.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-03-22T12:03:13Z">
        <changelog><![CDATA[initial release]]></changelog>
        <source main="midi_editor">https://github.com/Timtam/reapack/raw/f5f1ef24ee052818c3ee03144ef3f97022eab479/MIDI%20Editor/chessel_Export%20MIDI%20Sequence%20To%20Chesseq%20Sequence%20File.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak note velocity.lua" type="script" desc="Speak the first selected note velocity">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Announces the velocity of the first selected midi note\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2023-01-07T21:13:57Z">
        <source main="midi_editor">https://github.com/Timtam/reapack/raw/afc172cdaf7649277f87672abf552b246c963f68/MIDI%20Editor/chessel_Speak%20note%20velocity.lua</source>
      </version>
    </reapack>
    <reapack name="ReaperAccessible_Increase or decrease velocity between 2 limits entered by user with tension.lua" type="script" desc="Increase or decrease velocity between 2 limits entered by user with tension">
      <version name="1.1" author="Lee JULIEN pour Reaper Accessible augmented by Chessel" time="2024-12-18T19:04:08Z">
        <changelog><![CDATA[initial release]]></changelog>
        <source main="midi_editor">https://github.com/Timtam/reapack/raw/852da85f1608ab9a88de382b5bde6147f548d0ac/MIDI%20Editor/ReaperAccessible_Increase%20or%20decrease%20velocity%20between%202%20limits%20entered%20by%20user%20with%20tension.lua</source>
      </version>
    </reapack>
    <reapack name="timtam_AccessiChords.lua" type="script" desc="AccessiChords">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/graphs/contributors"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/contributors/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/network/members"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/forks/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/stargazers"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/stars/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/issues"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/issues/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
 {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/blob/master/LICENSE"}}{\fldrslt{\ul
{\cf1 [image: https://img.shields.io/github/license/Timtam/AccessiChords.svg?style=flat-square]\cf0}
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Table of Contents\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#about-the-project"}}{\fldrslt{\ul
About the Project
}}}
\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab {\field{\*\fldinst{HYPERLINK "#built-with"}}{\fldrslt{\ul
Built With
}}}
\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#getting-started"}}{\fldrslt{\ul
Getting Started
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#usage"}}{\fldrslt{\ul
Usage
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#roadmap"}}{\fldrslt{\ul
Roadmap
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#contributing"}}{\fldrslt{\ul
Contributing
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#license"}}{\fldrslt{\ul
License
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "#contact"}}{\fldrslt{\ul
Contact
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 About The Project\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Chords are an important, if not the most important part of music. As soon as you're composing a piece of music in REAPER, you'll come across chords and will have to insert them into your MIDI editor. No problem if you are able to play them with your favourite MIDI controller, but more of a hassle when programming your music manually via keyboard, or if you are unable to play an instrument.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thats probably the reason why the {\field{\*\fldinst{HYPERLINK "https://github.com/benjohnson2001/ChordGun"}}{\fldrslt{\ul
ChordGun scripts
}}}
 where invented. Those were ment to provide a nice-looking interface and the ability to get a quick overview over all chords available and the possibility to quickly shoot them into your project whenever you need them.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Unfortunately though, those ChordGun scripts are not accessible for visually impaired users. The interface is not accessible at all, neither with JAWS nor NVDA, not under Mac nor Windows. Thats why I started this project. Let AccessiChords be the successor of ChordGun - at least for VI people.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As such, AccessiChords provides a way to quickly access all chords related to a note selected with the pitch cursor and inject them into your MIDI editor at the current position and with the given grid size. See {\field{\*\fldinst{HYPERLINK "#usage"}}{\fldrslt{\ul
Usage
}}}
 for more information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Built With\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://www.lua.org/manual/5.3/"}}{\fldrslt{\ul
Lua 5.3
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://reaper.fm"}}{\fldrslt{\ul
REAPER 6.13 and above (older versions might run as well)
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://osara.reaperaccessibility.com/snapshots/"}}{\fldrslt{\ul
OSARA nightly build as of Sep 4 or later
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Getting Started\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Installation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 ReaPack\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is recommended to get the latest stable version from ReaPack by synchronizing your repositories and searching for AccessiChords in the package list. This will make sure to add all the available actions to your actions list as well.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Building from source\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Clone\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you thus instead want to test the bleeding edge build of this package, clone this repository locally:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 git clone https://github.com/Timtam/AccessiChords.git\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Copy the timtam_AccessiChords folder into your REAPER's scripts folder afterwards.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 note: make sure to copy the folder directly into your Scripts folder, not in some other sub-folder or a totally different directory to make sure that the scripts work directly.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Adding actions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Open an empty project within REAPER and open the actions list (shortcut: F4). Make sure to filter for MIDI Editor so that the actions will not be accessible from outside that one. Now select New Action and Load ReaScript. Make sure to load every timtam_AccessiChords file from within the timtam_AccessiChords folder, except the one that is called timtam_AccessiChords.lua. That one only contains dependencies and doesn't contain any action. Also do not load the smallfolk.lua file, that one is not required as an action.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Assigning shortcuts\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After installing the scripts in either of the ways above, you will have the actions provided by AccessiChords available in your actions list to be used. I however recommend to assign shortcuts to them to speed up the workflow and productivity with this toolset. Therefore, open the actions list again and search for AccessiChords in the filter input. I'd recommend the following shortcuts for the corresponding actions, although that's up to personal preference and you can assign them as you see fit:\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords insert selected chord for pitch cursor.lua: Shift + i (CAUTION: this one seems to be assigned already, so you might need to overwrite it. It seems to be the same one as plain i though, so you shouldn't have any disadvantages in overwriting the original one)\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords process notes deferred.lua: no shortcut required\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select next chord for pitch cursor.lua: CTRL + ALT + Up\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select previous chord for pitch cursor.lua: CTRL + ALT + DOWN\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select next chord inversion.lua: CTRL + ALT + RIGHT\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab timtam_AccessiChords select previous chord inversion.lua: CTRL + ALT + LEFT\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: when using MacOS, control is command and alt is option. Shift remains the same.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The script will be entirely keyboard-controllable afterwards.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Usage\par}
{\pard \ql \f0 \sa180 \li0 \fi0 All the functionalities below can and should only be executed from within the MIDI editor.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 note: all speech announcements will only work if you've got an OSARA version installed which was released Sep 4 2020 or later. If your installed OSARA version is older than that, you won't get any speech announcements by these scripts.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Cycling through available chords\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After you've selected a note using the pitch cursor (ALT + UP or DOWN arrow within the OSARA keymap), you can use the actions "timtam_AccessiChords select next chord for pitch cursor.lua" and "timtam_AccessiChords select previous chord for pitch cursor.lua" to cycle through all chords available for that note. When doing so, the chord will be played on the note channel selected for the virtual MIDI keyboard with the default velocity of the same. The name of the chord will also be announced by your screen reader. The scripts will also announce if the selected chord is not available for the given note.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Cycling through available chord inversions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 After selecting a note with the pitch cursor and a chord using the above actions, you can use the actions "timtam_AccessiChords select next chord inversion.lua" and "timtam_AccessiChords select previous chord inversion.lua" to cycle through the available chord inversions. Those will be announced with speech and remember as well, so that you can use the above actions to change chords while the inversion will be maintained and can be inserted as usual (see below).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Inserting a selected chord\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When having a chord selected, you can use the action "timtam_AccessiChords insert selected chord for pitch cursor.lua" to insert this chord at the current position into the MIDI editor. The notes will have the length of the current grid size or, if the length of the next inserted note is set using the appropriate reaper-native actions, they will have the appropriate length as well. The chord will be played again and the edit cursor will automatically be moved along the track by the size of the inserted notes. Note though that in contradiction to reaper-native note insertion, there currently is no speech when the cursor is moved that way. This will be considered a feature later to be implemented though.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Roadmap\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords/issues"}}{\fldrslt{\ul
open issues
}}}
 for a list of proposed features (and known issues).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contributing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are {\b greatly appreciated}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by coding\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Fork the Project\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Create your Feature Branch ({\f1 git checkout -b feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Commit your Changes ({\f1 git commit -m 'Add some AmazingFeature'})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Push to the Branch ({\f1 git push origin feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Open a Pull Request\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by testing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Feel free to give these scripts a go and see if they fit your workflow. Do you like those scripts, but can think of a way they might become even more useful to you? Feel free to let me know by opening an issue or contacting me via email at {\field{\*\fldinst{HYPERLINK "mailto:software@satoprogs.de"}}{\fldrslt{\ul
software@satoprogs.de
}}}
. Same goes for bugs you might have encountered or new features you'd like to see.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by paying me a coffee\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Developing takes time and effort and since those scripts are free to use and open-source, I don't get anything out of it except appreciation. Appreciation doesn't pay monthly bills though. If you think those scripts greatly improved your life by helping you with your productivity and workflow, or you simply want to give something back, i'd greatly appreciate a small donation via PayPal to the following link: {\field{\*\fldinst{HYPERLINK "https://paypal.me/ToniRonaldBarth"}}{\fldrslt{\ul
https://paypal.me/ToniRonaldBarth
}}}
 Don't feel obligated though.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 License\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Distributed under the GNU GPL v3 License. See {\f1 LICENSE} for more information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contact\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Toni Barth - {\field{\*\fldinst{HYPERLINK "https://twitter.com/GixGax95"}}{\fldrslt{\ul
@GixGax95
}}}
 - software@satoprogs.de\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Project Link: {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/AccessiChords"}}{\fldrslt{\ul
https://github.com/Timtam/AccessiChords
}}}
\par}
}
]]></description>
        <link rel="website" href="https://github.com/Timtam/AccessiChords">GitHub repository</link>
        <link rel="website" href="https://paypal.me/ToniRonaldBarth">Donation</link>
      </metadata>
      <version name="1.1" author="Toni Barth (Timtam)" time="2022-11-18T19:10:31Z">
        <changelog><![CDATA[* added: support chord inversions by adding two additional actions to switch between inversions
* fixed: flat fifth chord actually was a natural fifth chord
* fixed: AccessiChords didn't work with real-time generated samples (like ReaSynth)]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords stop notes.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords%20stop%20notes.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.1/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
      <version name="1.2" author="Toni Barth (Timtam)" time="2023-03-05T12:09:12Z">
        <changelog><![CDATA[* shortened playtime to 0.3 seconds
* rewrote stop notes action to work deferred
* added two new actions to cycle through chord modes and thus allowed to insert and preview broken chords (arpeggios)]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords process notes deferred.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20process%20notes%20deferred.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select next chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20mode.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select previous chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20mode.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.2/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
      <version name="1.2.1" author="Toni Barth (Timtam)" time="2023-03-05T12:19:25Z">
        <changelog><![CDATA[* fixed wrong action id for stopping currently playing notes]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords process notes deferred.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20process%20notes%20deferred.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select next chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20mode.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords select previous chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20mode.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.1/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
      <version name="1.2.2" author="Toni Barth (Timtam)" time="2023-03-05T12:40:58Z">
        <changelog><![CDATA[* fixed incorrect paths for installed files
* fixed wrong action id for stopping currently playing notes]]></changelog>
        <source file="timtam_AccessiChords/smallfolk.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords insert selected chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20insert%20selected%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords process notes deferred.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20process%20notes%20deferred.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select next chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20next%20chord%20mode.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord for pitch cursor.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20for%20pitch%20cursor.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord inversion.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20inversion.lua</source>
        <source main="midi_editor" file="timtam_AccessiChords/timtam_AccessiChords select previous chord mode.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords%20select%20previous%20chord%20mode.lua</source>
        <source file="timtam_AccessiChords/timtam_AccessiChords.lua">https://github.com/Timtam/AccessiChords/raw/v1.2.2/timtam_AccessiChords/timtam_AccessiChords.lua</source>
      </version>
    </reapack>
    <reapack name="timtam_IntelliQuant.lua" type="script" desc="IntelliQuant">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 A way to quantize notes intelligently.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This script will make sure to e.g. pull the notes into the correct direction without snapping them to grid exactly. You can configure a window in which the notes will be quantized. More informative README will follow as soon as 1.0 is out.\par}
}
]]></description>
        <link rel="website" href="https://github.com/Timtam/IntelliQuant">GitHub repository</link>
        <link rel="website" href="https://paypal.me/ToniRonaldBarth">Donation</link>
      </metadata>
      <version name="1.0b1" author="Toni Barth (Timtam)" time="2022-11-18T18:36:53Z">
        <changelog><![CDATA[add additional support for 8th triplets, 16th triplets and quintuplets]]></changelog>
        <source file="timtam_IntelliQuant/smallfolk.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant quantize.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20quantize.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 32th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2032th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 4th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%204th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for quintuplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%20quintuplet%20note%20quantization.lua</source>
        <source file="timtam_IntelliQuant/timtam_IntelliQuant.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b1/timtam_IntelliQuant/timtam_IntelliQuant.lua</source>
      </version>
      <version name="1.0b2" author="Toni Barth (Timtam)" time="2023-01-15T19:12:01Z">
        <changelog><![CDATA[add flam support for all actions via additional parameter within the configuration dialog]]></changelog>
        <source file="timtam_IntelliQuant/smallfolk.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant quantize.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20quantize.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 32th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2032th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 4th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%204th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for quintuplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%20quintuplet%20note%20quantization.lua</source>
        <source file="timtam_IntelliQuant/timtam_IntelliQuant.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b2/timtam_IntelliQuant/timtam_IntelliQuant.lua</source>
      </version>
      <version name="1.0b3" author="Toni Barth (Timtam)" time="2023-01-15T19:38:35Z">
        <changelog><![CDATA[fix flam support introduced in 1.0b2]]></changelog>
        <source file="timtam_IntelliQuant/smallfolk.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/smallfolk.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant quantize.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20quantize.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 16th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2016th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 32th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%2032th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 4th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%204th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for 8th triplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%208th%20triplet%20note%20quantization.lua</source>
        <source main="midi_editor" file="timtam_IntelliQuant/timtam_IntelliQuant set parameters for quintuplet note quantization.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant%20set%20parameters%20for%20quintuplet%20note%20quantization.lua</source>
        <source file="timtam_IntelliQuant/timtam_IntelliQuant.lua">https://github.com/Timtam/IntelliQuant/raw/v1.0b3/timtam_IntelliQuant/timtam_IntelliQuant.lua</source>
      </version>
    </reapack>
  </category>
  <category name="Various">
    <reapack name="chessel_Butt right edge of selected item up to next item.lua" type="script" desc="Butt right edge of selected item up to next item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Move selected item so right edge touches left edge of next item on track\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <changelog><![CDATA[# use VF version check]]></changelog>
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Butt%20right%20edge%20of%20selected%20item%20up%20to%20next%20item.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Cycle Project Timebase.lua" type="script" desc="Cycle Project Timebase">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Cycles through the 3 options for project time base\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Cycle%20Project%20Timebase.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Freeze track and add text to track name.lua" type="script" desc="Freeze track and add text to track name">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Call stock freeze track to stereo action and append the word frozen to track name\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Freeze%20track%20and%20add%20text%20to%20track%20name.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak Selected Items Length.lua" type="script" desc="Speak Selected Items Length">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Announces the sum of all selected item lengths items\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin), Pete Torpey" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Speak%20Selected%20Items%20Length.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak Selected Track End Time.lua" type="script" desc="Speak Selected Track End Time">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Speak the time of the end of the last item on the first selected track\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Speak%20Selected%20Track%20End%20Time.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Speak time to start of next item.lua" type="script" desc="Speak time to start of next item">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Finds the first selected item and announces time to the start of the next item. A positive number means there is space between the current item and the next one.\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin), Pete Torpey" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Speak%20time%20to%20start%20of%20next%20item.lua</source>
      </version>
    </reapack>
    <reapack name="Chessel_Start Recording After Countdown.lua" type="script" desc="Start Recording After Countdown">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Allows the user to state hours, minutes and seconds until recording starts\par}
}
]]></description>
      </metadata>
      <version name="0.1" author="Chessel (Chris Goodwin)" time="2023-09-24T20:11:55Z">
        <changelog><![CDATA[Initial release]]></changelog>
        <source main="main">https://github.com/Timtam/reapack/raw/05b9231aef3585e9caf605867451b54230c70ac7/Various/Chessel_Start%20Recording%20After%20Countdown.lua</source>
      </version>
    </reapack>
    <reapack name="chessel_Unfreeze track and remove text from track name.lua" type="script" desc="Unfreeze track and remove text from track name">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 Call stock unfreeze track function and remove the word frozen to track name\par}
}
]]></description>
      </metadata>
      <version name="1.0" author="Chessel (Chris Goodwin)" time="2022-11-24T16:42:09Z">
        <source main="main">https://github.com/Timtam/reapack/raw/fc905baddaf27285ba2784d737f9c6cb32db7267/Various/chessel_Unfreeze%20track%20and%20remove%20text%20from%20track%20name.lua</source>
      </version>
    </reapack>
    <reapack name="timtam_IntelliFreeze.lua" type="script" desc="IntelliFreeze">
      <metadata>
        <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 About The Project\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With a collaboration on the horizon, I started to check my possible ways to freely share work with others without having to re-import tracks all the time, but also allowing me and my collaborators to use plug-ins that the others don't have. Freezing was deffinetily the way to go, but my templates usually work with multiple levels of track folders and freezing a folder would just create a frozen item and mute all sub-tracks, which would cause various issues for my collaborators. Why not freeze all tracks individually from the get-go?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Thats exactly how the actions within this script work, they check the currently selected tracks, recursively gather all the sub-tracks that require freezing and freeze them individually bottom-up.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Built With\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://www.lua.org/manual/5.3/"}}{\fldrslt{\ul
Lua 5.3
}}}
\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\field{\*\fldinst{HYPERLINK "https://reaper.fm"}}{\fldrslt{\ul
REAPER 6.53 and above (older versions might run as well)
}}}
\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Getting Started\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Installation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 ReaPack\par}
{\pard \ql \f0 \sa180 \li0 \fi0 It is recommended to get the latest stable version from ReaPack by synchronizing your repositories and searching for IntelliFreeze in the package list. This will make sure to add all the available actions to your actions list as well.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Building from source\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Clone\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you thus instead want to test the bleeding edge build of this package, clone this repository locally:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 git clone https://github.com/Timtam/IntelliFreeze.git\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Copy the timtam_IntelliFreeze folder into your REAPER's scripts folder afterwards.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 note: make sure to copy the folder directly into your Scripts folder, not in some other sub-folder or a totally different directory to make sure that the scripts work directly.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Adding actions\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Open an empty project within REAPER and open the actions list (shortcut: F4). Now select New Action and Load ReaScript. Make sure to load every timtam_IntelliChords file from within the timtam_IntelliFreeze folder, except the one that is called timtam_IntelliFreeze.lua. That one only contains dependencies and doesn't contain any action.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Usage\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Its as easy as it can get, just select the tracks, folders, whatever you want to freeze within REAPER and run the corresponding action from the actions list. Feel free to bind them to keystrokes if you end up using them often.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Roadmap\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See the {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/IntelliFreeze/issues"}}{\fldrslt{\ul
open issues
}}}
 for a list of proposed features (and known issues).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contributing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are {\b greatly appreciated}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by coding\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 1.\tx360\tab Fork the Project\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 2.\tx360\tab Create your Feature Branch ({\f1 git checkout -b feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 3.\tx360\tab Commit your Changes ({\f1 git commit -m 'Add some AmazingFeature'})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 4.\tx360\tab Push to the Branch ({\f1 git push origin feature/AmazingFeature})\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 5.\tx360\tab Open a Pull Request\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by testing\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Feel free to give these scripts a go and see if they fit your workflow. Do you like those scripts, but can think of a way they might become even more useful to you? Feel free to let me know by opening an issue or contacting me via email at {\field{\*\fldinst{HYPERLINK "mailto:software@satoprogs.de"}}{\fldrslt{\ul
software@satoprogs.de
}}}
. Same goes for bugs you might have encountered or new features you'd like to see.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Contribute by paying me a coffee\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Developing takes time and effort and since those scripts are free to use and open-source, I don't get anything out of it except appreciation. Appreciation doesn't pay monthly bills though. If you think those scripts greatly improved your life by helping you with your productivity and workflow, or you simply want to give something back, i'd greatly appreciate a small donation via PayPal to the following link: {\field{\*\fldinst{HYPERLINK "https://paypal.me/ToniRonaldBarth"}}{\fldrslt{\ul
https://paypal.me/ToniRonaldBarth
}}}
 Don't feel obligated though.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 License\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Distributed under the GNU GPL v3 License. See {\f1 LICENSE} for more information.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Contact\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Toni Barth - {\field{\*\fldinst{HYPERLINK "https://twitter.com/GixGax95"}}{\fldrslt{\ul
@GixGax95
}}}
 - software@satoprogs.de\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Project Link: {\field{\*\fldinst{HYPERLINK "https://github.com/Timtam/IntelliFreeze"}}{\fldrslt{\ul
https://github.com/Timtam/IntelliFreeze
}}}
\par}
}
]]></description>
        <link rel="website" href="https://github.com/Timtam/IntelliFreeze">GitHub repository</link>
        <link rel="website" href="https://paypal.me/ToniRonaldBarth">Donation</link>
      </metadata>
      <version name="1.1" author="Toni Barth (Timtam)" time="2022-11-18T17:02:02Z">
        <changelog><![CDATA[- consider takes with FX to be frozen too]]></changelog>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Freeze all selected tracks to mono recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Freeze%20all%20selected%20tracks%20to%20mono%20recursively.lua</source>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Freeze all selected tracks to multi-channel recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Freeze%20all%20selected%20tracks%20to%20multi-channel%20recursively.lua</source>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Freeze all selected tracks to stereo recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Freeze%20all%20selected%20tracks%20to%20stereo%20recursively.lua</source>
        <source main="main" file="timtam_IntelliFreeze/timtam_IntelliFreeze Unfreeze all selected tracks recursively.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze%20Unfreeze%20all%20selected%20tracks%20recursively.lua</source>
        <source file="timtam_IntelliFreeze/timtam_IntelliFreeze.lua">https://github.com/Timtam/IntelliFreeze/raw/v1.1/timtam_IntelliFreeze/timtam_IntelliFreeze.lua</source>
      </version>
    </reapack>
  </category>
  <metadata>
    <description><![CDATA[{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 \fmodern Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \outlinelevel0 \b \fs36 ReaPack Repository Template\par}
{\pard \ql \f0 \sa180 \li0 \fi0 A template for GitHub-hosted ReaPack repositories with automated {\field{\*\fldinst{HYPERLINK "https://github.com/cfillion/reapack-index"}}{\fldrslt{\ul
reapack-index
}}}
 running from GitHub Actions.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Replace the name of the repository in {\field{\*\fldinst{HYPERLINK "/index.xml"}}{\fldrslt{\ul
index.xml
}}}
 when using this template. This will be the name shown in ReaPack.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 <index version="1" name="Name of your repository here">\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Replace the contents of this file ({\field{\*\fldinst{HYPERLINK "/README.md"}}{\fldrslt{\ul
README.md
}}}
). This will be the text shown when using ReaPack's "About this repository" feature.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 reapack-index looks for package files in subfolders. The folder tree represents the package categories shown in ReaPack.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Each package file is expected to begin with a metadata header. See {\field{\*\fldinst{HYPERLINK "https://github.com/cfillion/reapack-index/wiki/Packaging-Documentation"}}{\fldrslt{\ul
Packaging Documentation
}}}
 on reapack-index's wiki.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The URL to import in ReaPack is {\field{\*\fldinst{HYPERLINK "https://github.com/cfillion/reapack-repository-template/raw/master/index.xml"}}{\fldrslt{\ul
https://github.com/{\f1 <your username>}/{\f1 <repository name>}/raw/master/index.xml
}}}
.\par}
}
]]></description>
  </metadata>
</index>
