desc:ChessSeq Midi sequencer 
author:Chessel 
version:1.3
provides:
  [data] ChesSeq example > ChessSeq/4 step example.txt
about:
  Instructions:
  This plugin is a monophonic midi sequencer that is intended to be accessible.
  This plugin reads text files containing a sequence of notes and velocities which need to be in a subfolder of the Reaper resources folder.  Namely,  Data/ChessSeq.  Each file needs the txt extension.
  the file needs to be made up of a series of pairs of numbers.  First number is the offset in semitones, the second is the velocity.  No spaces.  Lines starting with // are ignored. Here is an example:

  //A 4 step sequence 
  0,100
  7,50
  12,80
  -1,40

  This will play the root note, a fifth above, an octave above and a semitone below with given velocities.
  A velocity of zero will mean no note is played.
  A velocity of -1 means a tie so the previous note will last longer.  The offset value is ignored.
  The sequencer makes no sound itself but sends midi events to a midi instrument.  Use one of the following setups:

  1. Put Chessel Sequencer on a track in front of a synth,
  2. Put Chessel Sequencer on the input FX chain with a synth on the main track FX.  This allows you to capture the midi events.  Good idea to enable PDC on the track when using this method to ensure notes land exactly on the beat.
  3. Put Chessel Sequencer  on a seprate track and set up a send to a track with a synth on.

  The sequence file parameter is a list of all the files in the  ChessSeq folder.  When you change this parameter the sequence gets loaded.  If you change the contents of the file you can reload it using the reload parameter which just needs a twiddle.

  The Play Mode parameter has two options.

  * Trigger mode allows you to press a key on a midi keyboard and that plays the next note in the sequence. 
    By default, the velocity is set by the sequence file but toggling the velocity source parameter to "Key velocity" changes it to play at the velocity of the played key.
    The note lasts as long as you hold down the key. A step with a velocity of zero will still need a key press. A tied note gets skipped. 
    You can write a sequence to play a tune and simply play it by continually pressing a single key. To change the musical key, just use a different root note. 
  * Sequencer mode plays the sequence at the rate determined by the steps per unit and beats per unit parameters. For example, with beats per unit set to 1 and steps per unit set to 4, the sequencer will play sixteenth notes. 
    Or a polyrythm of 5 notes every half measure can be set up with notes per unit set to 5 and beats per unit set to 2.
    To play just hold down a key. This key acts as the root note so a step with an offset of zero will play at this pitch. A step defined in the sequence file of 7 will play a fifth above this root note.
    As play continues you can change the root note by holding down a different key. Play legato for smooth transitions or leave a gap between keys to have the sequence restart from the first step. 
    When Reaper is playing or recording, playback of the sequence starts at the next beat so timing of key presses doesn't need to be precise. 
    The legato parameter is a percentage of the time between steps.   Small values will be more staccato and larger values will approach full legato.

  The mute parameter will suspend midi events but the sequencer will keep cycling. 
  The direction the sequence is played can be reversed by toggling the direction parameter.  Be aware of loading a new sequence from file if the direction is set to backwards!
  The invert parameter allows for playing negative harmonies as each step in the sequence is inverted.  A step with offset plus 5 will become negative 5.  An offset of negative 12 will become lus 12.  
  Generally, a sequence in a major key will become minor and vice versa.  Good results are obtained by playing an inverted sequence a perfect fifth (7 steps) higher.
  The order of steps can be randomized using the Randomize parameter.
  The mute, direction, invert and randomize parameters can all be set to be midi key triggered with keys from 0 to 48.  
  For example, setting the mute trigger key to 48 means that playing the sequence and then pressing midi note 48 will mute the  further midi messages from being sent to the synth.  This feature is also useful for playing inverted sequences on the fly.

  Possible future work:

  * Add a swing parameter which will affect every other note.
  * If velocity is -2 this means a slide which overrides the length parameter so this will cause a synth with portomento to work.
  * If a second key is held down in sequencer mode that is a minor or major third above the root note, any steps with this offset will get played as minor or major accordingly.
  * Allow a number of sequence patterns to be loaded.  Activate each pattern with keys C0 to B0.
  * Polyphonic mode where you can define extra notes to play at same time as root steps, or possibly if you play a chord these are played.
  * Currently, play note 1, play note 2 legato, release note 2, should return to note 1 which is still held down.
  * Add parameters for probability of randomizing a step, and another parameter for range of randomization.  Possibly limit to a scale?

  Known bugs:

  * Whilst playing a sequence, pressing home to go to start of project stops it playing and you can play any more.
  * When preroll is on, recording root notes will only start at beat 2 and not beat 1.  Yet what is recorded is correct and subsequent plays will start at beat 1.
  * Putting legato up to 93% or higher leads to notes playing endlessly.
  * If you change direction or invert parameters whilst playing up into the key number area, should it revert to the default value?  Currently stays backwards or inverted.

changelog:
  * Parameter to randomize the sequence. Can also be set to a midi trigger note.

slider1:/ChessSeq:none:Sequence file //Path containing sequence files 
slider2:0<0,1,1{No action,Reload sequence}>Change this to reload sequence  
slider3:1<0,1,1{Trigger mode,Sequencer play}>Play mode
slider4:2<1,16,1>Steps per unit
slider5:1<1,16,1>Beats per unit
slider6:40<1,99,1>Legato (%)
//slider7:0<-1,1,0.1>Swing
slider8:0<0,1,1{Sequence file,Key velocity}>Velocity source
slider9:0<0,50,1{Unmuted,Muted,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43, 44, 45, 46, 47, 48}>Mute / trigger key
slider10:0<0,50,1{Forward,Backward,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43, 44, 45, 46, 47, 48}>Direction / trigger key
slider11:0<0,50,1{Normal,Inverted,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43, 44, 45, 46, 47, 48}>Invert / trigger key
slider12:0<0,50,1{Original,Randomized,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43, 44, 45, 46, 47, 48}>Randomize sequence / trigger key

in_pin:none
out_pin:none



@init
//Store steps and velocities in arrays.  Max number of steps is 128 
maxSteps = 128;
sequence = 0;
velocity=maxSteps;
originalSeq = 2 * maxSteps;
originalVel = 3 * maxSteps;
seqFile = -1;
reload=1;
currentStep = 0;
numSteps=0;
noteHold=-1;
rootNote=-1;
noteCount=0;
direction=0;
mirror=0;
randomized = 0;
stateNoteOn = $x90;
stateNoteOff = $x80;
nextNoteOffset=-1;
offNoteOffset=-1;

function changeInvert( seq, vel, steps )
(
  i=0;
  while( i < steps )
  (
    seq[i] = -seq[i];
    i+=1;
  );
);

function changeDirection( seq, vel, steps )
(
  i=0;
  while( i <  floor(steps/2) )
  (
    tmp = seq[i];
    seq[i] = seq[steps-i-1];
    seq[steps-i-1] = tmp;
    tmp = vel[i];
    vel[i] = vel[steps-i-1];
    vel[steps-i-1] = tmp;
    i+=1;
  );
);

function RandomizeSequence( )
(
  i = 0;
  while( i < numSteps  )
  (
    randVal = rand( numSteps -1) | 0;
    tmp = sequence[i];
    sequence[i] = sequence[randVal];
    sequence[randVal] = tmp;
    tmp = velocity[i];
    velocity[i] = velocity[randVal];
    velocity[randVal] = tmp;     
    i += 1
  );
  randomized = 1;
);

function RestoreSequence( )
(
  memcpy( sequence, originalSeq, numSteps );
  memcpy( velocity, originalVel, numSteps );
  randomized = 0;
);

function getNextStep(curStep, maxStep )
(
  curStep+1 == maxStep ? 0 : curStep+1;
);



@slider
playMode=slider3;
stepsPerUnit=slider4;
beatsPerUnit=slider5;
noteLength=slider6/100;
//swing=slider7;
velocitySource=slider8;
slider9==0 || slider9==1 ? muted = slider9 : ( muted=0; muteTrigger = slider9 - 2;);


slider2 == 1 ? //Slider changed to reload file 
(
  reload = 1;
  slider2 = 0; sliderchange(slider2);
);

//Load sequence 
seqFile != slider1 | 0 || reload == 1 ?
(
  reload = 0;
  stepsLoaded = 0;
  step_value = 0;
  vel_value = 0;
  seqFile = slider1;
  fileHandle = file_open(slider1);  //Open the file 
  fileHandle > 0 && file_text(fileHandle) ?  //File is open and it is a text file 
  (
    while(       file_avail(fileHandle) > 0 && stepsLoaded < maxSteps )
    (
      step_value = -1;
      file_var(fileHandle, step_value );   //Read the first value of the current line as the step offset 
      sequence[ stepsLoaded] = step_value;
      file_var(fileHandle, vel_value );   //Read the second value as the velocity 
      velocity[ stepsLoaded ] = vel_value;
      stepsLoaded += 1;
    );    
    file_close(fileHandle);
    sequence[stepsLoaded-1] == -1 ? stepsLoaded -= 1;
    numSteps = stepsLoaded;
    memcpy( originalSeq, sequence, numSteps );
    memcpy( originalVel, velocity, numSteps );
  );
);

//Do we reverse the sequence?
direction != slider10 ?
(
  slider10 == 0 || slider10 == 1 ?
  (
    changeDirection( sequence, velocity, numSteps );
    direction = slider10;
  ) : directionTrigger = slider10-2;
);

//Do we mirror the sequence?
mirror != slider11 ?
(
  slider11 == 0 || slider11 == 1 ?
  (
    changeInvert( sequence, velocity, numSteps );
    mirror = slider11;
  ) : mirrorTrigger = slider11-2;
);

//Do we randomize or unrandomize the sequence?
randomized  != slider12 ?
(
  slider12 == 0 ? //Restore if slider is on default value 
  (
    restoreSequence( );
  ) : slider12 == 1 ? (
    RandomizeSequence( );
  ) : randomizeTrigger = slider12-2;
);



@block 
playMode == 0 ?
(
  while( midirecv( offset, msg1, msg23 ) )
  (
    // Extract message type 
    status = msg1 & $xF0;
    msg23 & $xFF == muteTrigger ?
    (
      msg1 & $xF0 == stateNoteOn ? muted = 1 : muted =0; 
    ) : msg23 & $xFF == directionTrigger ? (
      changeDirection( sequence, velocity, numSteps);
    ) : msg23 & $xFF == mirrorTrigger ? (
      changeInvert( sequence, velocity, numSteps);
    ) : msg23 & $xFF == randomizeTrigger ? (
    randomized == 0 ? RandomizeSequence() : RestoreSequence(); 
    ) : (
      /// Is it a note on event?
      status == stateNoteOn ?
      (
        // If note is already on because multiple keys are being pressed send a note off first 
        noteHold >= 0 ?
        (  
          midisend( offset, $x80 + msg1&$x0F, noteHold ); 
          noteHold = -1; 
        );
        // Send on note modified by the sequencer step value 
        noteHold = ( msg23+sequence[currentstep] ) & $xFF;
        noteHold < 0 ? noteHold = 0 : noteHold > 127 ? noteHold = 127 : noteHold;
        velocitySource==0?vel=velocity[currentstep] : (vel=(msg23/256) & $xFF );  
        muted == 0 ? midisend( offset, msg1, noteHold, vel );
        safer=0;
        currentstep = getNextStep( currentstep, numSteps ); 
        while( velocity[currentstep] == -1   && safer < numSteps )
        (
          currentstep = getNextStep( currentstep, numSteps );
          safer += 1;
        );
      ) 
      :status == stateNoteOff ? 
      (
        currentstep ==   0 ? offStep = numSteps -1 : offStep = currentstep - 1;
        midisend(offset, msg1, noteHold ); 
        noteHold = -1;
      )
      : 
      (
        midisend(offset, msg1, msg23); // Not a note event, pass thru
      );
    );
  );
);

playMode == 1 ?
(  //First examine notes coming in to see if the root note needs updating 
  while( midirecv( offset, msg1, msg2, msg3 ) )
  (
    msg2 == muteTrigger ?
    (
      msg1 & $xF0 == stateNoteOn ? muted = 1 : muted =0; 
    ) : msg2 == directionTrigger ? (
      changeDirection( sequence, velocity, numSteps);
    ) : msg2 == mirrorTrigger ? (
      changeInvert( sequence, velocity, numSteps);
    ) : msg2 == randomizeTrigger ? (
      randomized == 0 ? RandomizeSequence() : RestoreSequence();
    ) : (
      msg1 & $xF0 == stateNoteOn ? 
      (
        rootNote == -1 ?  (
          play_state &  $x1 ?
          (
            nextNoteOffset = ( ceil(beat_position) - beat_position ) * srate * 60 / tempo; //If this is the first key press then calculate samples until playback starts 
          ) : (
            nextNoteOffset = 0;  //Offset is zero if Reaper is not playing or recording 
          );
          currentstep = 0;  //Force sequence to start at first step when key first pressed 
        );
        rootNote = msg2;          
          noteCount += 1; //Count the number of note on events 
      ) : msg1 & $xF0 == stateNoteOff  ? (
           noteCount -= 1;  //Keeping track of how many keys are down 
      ) : (  
        midisend( offset, msg1, msg2, msg3 );  //Pass through anything that is not a note on or note off  
      );
    );
  );

  //Execute playing the sequence 
  ( nextNoteOffset >= 0 && nextNoteOffset < samplesblock && rootNote != -1 ) ?
  (
    lastNotePlayed = rootNote + sequence[ currentstep ];
    lastNotePlayed  < 0 ? lastNotePlayed = 0 : lastNotePlayed > 127 ? lastNotePlayed = 127 : lastNotePlayed;
    velocitySource==0?vel=velocity[currentstep] : (vel=msg3);  
    muted == 0 ?midisend( nextNoteOffset, $x90, lastNotePlayed, vel ); //velocity[ currentstep ] ); 
    currentstep = getNextStep( currentstep, numSteps );
    inc = (srate * 60 / tempo) * ( beatsPerUnit / stepsPerUnit  );
    nextNoteOffset +=  inc;
      while( velocity[currentstep] == -1 )  //This is the code block that skips steps if there the step is a tie
      ( 
        nextNoteOffset +=  inc; 
        currentstep = getNextStep( currentstep, numsteps );
      );
    offNoteOffset = nextNoteOffset - ( 1 - noteLength ) * inc;
  );
  ( offNoteOffset >= 0 && offNoteOffset < samplesblock ) ?
    (
       midisend( offNoteOffset, $x80, lastNotePlayed  );
    );
  nextNoteOffset -= samplesblock;
  offNoteOffset -= samplesblock;
  noteCount == 0 ? rootnote = -1;  //Only stop playback if there are no keys held down 
);  //Playmode is sequencer 

